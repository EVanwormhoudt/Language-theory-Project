/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var langage = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,40],$V1=[1,17],$V2=[1,16],$V3=[1,19],$V4=[1,28],$V5=[1,20],$V6=[1,30],$V7=[1,22],$V8=[1,3],$V9=[1,4],$Va=[1,9],$Vb=[1,10],$Vc=[1,13],$Vd=[1,14],$Ve=[1,23],$Vf=[1,24],$Vg=[1,26],$Vh=[1,27],$Vi=[1,13,15,24,30,34,36,38,42,49],$Vj=[36,42],$Vk=[2,21],$Vl=[1,45],$Vm=[1,4,13,15,17,19,24,28,30,32,34,36,38,42,45,49,53,64,66,69,74,75,76,79,80,85,86],$Vn=[1,51],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[2,70],$Vt=[1,59],$Vu=[1,63],$Vv=[2,5],$Vw=[7,22,39,58,59,60,61,62,63,78,81,82,83,84],$Vx=[2,33],$Vy=[2,37],$Vz=[1,110],$VA=[2,25],$VB=[1,118],$VC=[34,36,42],$VD=[7,22,39,58,59,60,61,62,63,81],$VE=[7,22];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"IF":3,"SI":4,"(":5,"condition":6,")":7,":":8,"THEN":9,"ALORS":10,"ELSE":11,"bloc":12,"SINON":13,"ENDIF":14,"FINSI":15,"VARFOR":16,"VAR":17,"FOR":18,"POUR":19,"ALLANT":20,"e":21,",":22,"INC":23,"FINPOUR":24,"ENDFOR":25,"WHILE":26,"WHILEFIRST":27,"TANTQUE":28,"ENDWHILE":29,"FINTANTQUE":30,"SWITCH":31,"CHOIX":32,"CASE":33,"CAS":34,"DEFAULT":35,"DEFAUT":36,"ENDCASE":37,"PAUSE":38,";":39,"ENDSWITCH":40,"BLOCSWITCH":41,"FINCHOIX":42,"INSTRUCTIONSWITCH":43,"FUNCTION":44,"FONCTION":45,"FUNCTION2":46,"PARAMETERS":47,"FUNCTION3":48,"RETOURNER":49,"CALLFUNCTION":50,"PARAMETERS2":51,"PRINT":52,"AFFICHER":53,"PARAMETERS3":54,"ARGUMENTS":55,"STRING":56,"instruction":57,"SUP":58,"INF":59,"SUPEGAL":60,"INFEGAL":61,"EGAL":62,"NOTEGAL":63,"DEBUT":64,"{":65,"}":66,"FIN":67,"EOF":68,"MOVE":69,"UP":70,"DOWN":71,"LEFT":72,"RIGHT":73,"PARLE":74,"COM":75,"RETOURNE":76,"=":77,"ADD":78,"NUMBER":79,"[":80,"]":81,"SUB":82,"MULT":83,"DIV":84,"RECUP":85,"TEST":86,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SI",5:"(",7:")",8:":",10:"ALORS",13:"SINON",15:"FINSI",17:"VAR",19:"POUR",20:"ALLANT",22:",",24:"FINPOUR",28:"TANTQUE",30:"FINTANTQUE",32:"CHOIX",34:"CAS",36:"DEFAUT",38:"PAUSE",39:";",42:"FINCHOIX",45:"FONCTION",49:"RETOURNER",53:"AFFICHER",56:"STRING",58:"SUP",59:"INF",60:"SUPEGAL",61:"INFEGAL",62:"EGAL",63:"NOTEGAL",64:"DEBUT",65:"{",66:"}",67:"FIN",68:"EOF",69:"MOVE",70:"UP",71:"DOWN",72:"LEFT",73:"RIGHT",74:"PARLE",75:"COM",76:"RETOURNE",77:"=",78:"ADD",79:"NUMBER",80:"[",81:"]",82:"SUB",83:"MULT",84:"DIV",85:"RECUP",86:"TEST"},
productions_: [0,[3,5],[9,2],[11,3],[14,2],[16,0],[16,1],[18,11],[23,2],[25,1],[26,5],[27,1],[29,2],[31,5],[33,5],[35,2],[37,0],[37,2],[40,4],[40,2],[43,3],[41,0],[41,2],[44,2],[46,5],[47,0],[47,1],[47,3],[48,5],[48,4],[50,4],[51,1],[51,3],[51,0],[52,4],[54,1],[54,3],[54,0],[55,1],[55,1],[12,0],[12,2],[6,1],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[57,2],[57,3],[57,5],[57,3],[57,3],[57,3],[57,5],[57,5],[57,5],[57,5],[57,5],[57,1],[57,2],[57,1],[57,3],[57,2],[57,2],[57,4],[57,3],[21,3],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,1],[21,3],[21,4],[21,4],[21,4],[21,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("SI");addInstruction(0,"JMPCOND", 0);addTmpIf();tabTmpIf[CurseurIf].jc = ic;
break;
case 2:
console.log("ALORS");
break;
case 3:
console.log("SINON");addInstruction(0,"JMP",0);tabTmpIf[CurseurIf].jmp = ic;code_genere[tabTmpIf[CurseurIf].jc-1].value = ic;
break;
case 4:
console.log("FINSI");code_genere[tabTmpIf[CurseurIf].jmp-1].value = ic;addInstruction(0,"FINSIF", 0);CurseurIf=CurseurIf-1;
break;
case 6:
addInstruction($$[$0],"VARFOR", 0);
break;
case 7:
console.log("POUR");addTmpFor();console.log(CurseurFor);addInstruction(0,"POUR",0);tabTmpFor[CurseurFor].jc = ic-1;
break;
case 8:
console.log("INC");addInstruction(0,"INCFOR",0); code_genere[ic-1].value=tabTmpFor[CurseurFor].jc+1;code_genere[tabTmpFor[CurseurFor].jc].value=ic;
break;
case 9:
console.log("INC");addInstruction(0,"FINPOUR",0);CurseurFor=CurseurFor-1;
break;
case 10:
console.log("TANT QUE");addInstruction(0,"JMPCONDWHILE",0);tabTmpWhile[CurseurWhile].jmp = ic-1;
break;
case 11:
addTmpWhile();addInstruction(0,"WHILEFIRST",0);tabTmpWhile[CurseurWhile].jc = ic;
break;
case 12:
console.log("Fin TANT QUE");addInstruction(0,"JMPENDWHILE",0);code_genere[ic-1].value = tabTmpWhile[CurseurWhile].jc-1;code_genere[tabTmpWhile[CurseurWhile].jmp].value = ic;CurseurWhile=CurseurWhile-1;
break;
case 13:
console.log("CHOIX");addInstruction(0,"SWITCH",0);addTmpSwitch();
break;
case 14:
console.log("CASE");addInstruction(0,"CASE",tabTmpSwitch[CurseurSwitch].nbCase);tabTmpSwitch[CurseurSwitch].tabCase.push(ic-2);tabTmpSwitch[CurseurSwitch].nbCase++;
break;
case 15:
console.log("DEFAULT");addInstruction(0,"SWITCHDEFAULT",0);tabTmpSwitch[CurseurSwitch].default=ic-1
break;
case 17:
console.log("PAUSE");addInstruction(0,"PAUSE",0);
break;
case 18: case 19:
addInstruction(0,"ENDSWITCH",0);tabTmpSwitch[CurseurSwitch].FinSwitch = ic;CurseurSwitch=CurseurSwitch-1;
break;
case 23:
addFonctions();addInstruction(0,"NEWFUNCTION",0);tabFonctions[CurseurFonctions].name = $$[$0];tabFonctions[CurseurFonctions].debut = ic;
break;
case 26:
tabFonctions[CurseurFonctions].tabArguments.push($$[$0])
break;
case 27:
tabFonctions[CurseurFonctions].tabArguments.push($$[$0-2])
break;
case 28:
addInstruction(0,"RETURN",0);tabFonctions[CurseurFonctions].fin = ic;tabFonctions[CurseurFonctions].mapReturn.set(ic-1,$$[$0-1]);
break;
case 29:
addInstruction(0,"RETURN",0);tabFonctions[CurseurFonctions].fin = ic;tabFonctions[CurseurFonctions].mapReturn.set(ic-1,0);
break;
case 30:
addInstruction($$[$0-3].toString(),"FINDFONCTION",);
break;
case 34:
addInstruction(0,"PRINT",0);
break;
case 39:
addInstruction($$[$0],"STRING", 0)
break;
case 43:
addInstruction(0,"SUP", 0);
break;
case 44:
addInstruction(0,"INF", 0);
break;
case 45:
addInstruction(0,"SUPEGAL", 0);
break;
case 46:
addInstruction(0,"INFEGAL", 0);
break;
case 47:
addInstruction(0,"EGAL", 0);
break;
case 48:
addInstruction(0,"NOTEGAL", 0);
break;
case 49:
console.log("-----Debut du programme-----");
break;
case 50:
console.log("-----Fin du programme-----");
break;
case 55:
addInstruction(0,"MH",0);
break;
case 56:
addInstruction(0,"MB",0);
break;
case 57:
addInstruction(0,"MG",0);
break;
case 58:
addInstruction(0,"MD",0);
break;
case 59:
addInstruction($$[$0-2],"SPEAK",0);
break;
case 63:
addInstruction(0,"RETURN",$$[$0-1]);tabFonctions[CurseurFonctions].mapReturn.set(ic-1,$$[$0-1])
break;
case 64:
addInstruction(0,"RETURN",$$[$0]);tabFonctions[CurseurFonctions].mapReturn.set(ic-1,0)
break;
case 66:
addInstruction($$[$0-3],"ASSIGN",0 ); 
break;
case 67:
addInstruction($$[$0-2],"INC", 0);
break;
case 68:
addInstruction(0,"ADD", 0);
break;
case 69:
this.$ = Number(yytext);addInstruction(0,"NUM", yytext);
break;
case 70:
addInstruction($$[$0],"VAR", 0);
break;
case 72:
addInstruction(0,"SUB", 0);
break;
case 73:
addInstruction(0,"MULT", 0);
break;
case 74:
addInstruction(0,"DIV", 0);
break;
case 76:
addInstruction(0,"GET",0);
break;
case 77:
addInstruction(0,"TH",0);
break;
case 78:
addInstruction(0,"TB",0);
break;
case 79:
addInstruction(0,"TD",0);
break;
case 80:
addInstruction(0,"TG",0);
break;
}
},
table: [{1:$V0,3:5,4:$V1,12:1,17:$V2,18:7,19:$V3,21:15,26:6,27:18,28:$V4,31:8,32:$V5,44:29,45:$V6,46:21,48:11,50:25,52:12,53:$V7,57:2,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{1:[3]},o($Vi,$V0,{57:2,3:5,26:6,18:7,31:8,48:11,52:12,21:15,27:18,46:21,50:25,44:29,12:31,4:$V1,17:$V2,19:$V3,28:$V4,32:$V5,45:$V6,53:$V7,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh}),{65:[1,32]},{67:[1,33]},{9:34,10:[1,35]},{3:5,4:$V1,12:37,17:$V2,18:7,19:$V3,21:15,26:6,27:18,28:$V4,29:36,30:$V0,31:8,32:$V5,44:29,45:$V6,46:21,48:11,50:25,52:12,53:$V7,57:2,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{3:5,4:$V1,12:40,17:$V2,18:7,19:$V3,21:15,23:39,24:$V0,25:38,26:6,27:18,28:$V4,31:8,32:$V5,44:29,45:$V6,46:21,48:11,50:25,52:12,53:$V7,57:2,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh},o($Vj,$Vk,{40:41,41:42,43:43,33:44,34:$Vl}),{5:[1,46]},{5:[1,47]},o($Vm,[2,60]),{39:[1,48]},o($Vm,[2,62]),{17:$Vn,21:49,39:[1,50],50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{39:[1,52],78:$Vo,82:$Vp,83:$Vq,84:$Vr},o([39,78,82,83,84],$Vs,{57:2,3:5,26:6,18:7,31:8,48:11,52:12,21:15,27:18,46:21,50:25,44:29,12:40,23:58,4:$V1,5:$Vt,17:$V2,19:$V3,24:$V0,28:$V4,32:$V5,45:$V6,53:$V7,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,77:[1,57],79:$Ve,80:$Vf,85:$Vg,86:$Vh}),{5:[1,60]},{5:[1,61]},{16:62,17:$Vu,20:$Vv},{5:[1,64]},{3:5,4:$V1,12:65,17:$V2,18:7,19:$V3,21:15,26:6,27:18,28:$V4,31:8,32:$V5,44:29,45:$V6,46:21,48:11,49:$V0,50:25,52:12,53:$V7,57:2,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{5:[1,66]},o($Vw,[2,69]),{17:$Vn,21:67,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},o($Vw,[2,75]),{5:[1,68]},{5:[1,69]},{5:[2,11]},{5:[1,70]},{17:[1,71]},o($Vi,[2,41]),o($Vm,[2,49]),{68:[1,72]},{3:5,4:$V1,11:73,12:74,13:$V0,17:$V2,18:7,19:$V3,21:15,26:6,27:18,28:$V4,31:8,32:$V5,44:29,45:$V6,46:21,48:11,50:25,52:12,53:$V7,57:2,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{8:[1,75]},{39:[1,76]},{30:[1,77]},{39:[1,78]},{39:[2,9]},{24:[1,79]},{39:[1,80]},{35:81,36:[1,83],42:[1,82]},o($Vj,$Vk,{43:43,33:44,41:84,34:$Vl}),o([34,36,38,42],$V0,{57:2,3:5,26:6,18:7,31:8,48:11,52:12,21:15,27:18,46:21,50:25,44:29,12:85,4:$V1,17:$V2,19:$V3,28:$V4,32:$V5,45:$V6,53:$V7,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh}),{5:[1,86]},{70:[1,87],71:[1,88],72:[1,89],73:[1,90]},{17:$Vn,21:91,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},o($Vm,[2,61]),{39:[1,92],78:$Vo,82:$Vp,83:$Vq,84:$Vr},o($Vm,[2,64]),o($Vw,$Vs,{5:$Vt}),o($Vm,[2,65]),{17:$Vn,21:93,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:94,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:95,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:96,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:97,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{39:[1,98]},{7:$Vx,17:$Vn,21:100,50:25,51:99,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{6:101,17:$Vn,21:102,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{6:103,17:$Vn,21:102,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{20:[1,104]},o([7,20],[2,6]),{7:$Vv,16:105,17:$Vu},{49:[1,106]},{7:$Vy,17:$Vn,21:109,50:25,54:107,55:108,56:$Vz,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{78:$Vo,81:[1,111],82:$Vp,83:$Vq,84:$Vr},{7:[1,112]},{70:[1,113],71:[1,114],72:[1,116],73:[1,115]},{7:$VA,17:$VB,47:117},{5:[2,23]},o($Vm,[2,50]),{3:5,4:$V1,12:120,14:119,15:$V0,17:$V2,18:7,19:$V3,21:15,26:6,27:18,28:$V4,31:8,32:$V5,44:29,45:$V6,46:21,48:11,50:25,52:12,53:$V7,57:2,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{13:[1,121]},o([4,13,17,19,28,32,45,53,64,66,69,74,75,76,79,80,85,86],[2,2]),o($Vm,[2,52]),{39:[2,12]},o($Vm,[2,53]),{39:[2,8]},o($Vm,[2,54]),{3:5,4:$V1,12:122,17:$V2,18:7,19:$V3,21:15,26:6,27:18,28:$V4,31:8,32:$V5,42:$V0,44:29,45:$V6,46:21,48:11,50:25,52:12,53:$V7,57:2,64:$V8,66:$V9,69:$Va,74:$Vb,75:$Vc,76:$Vd,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{39:[2,19]},{8:[1,123]},o($Vj,[2,22]),o($VC,[2,16],{37:124,38:[1,125]}),{17:$Vn,21:126,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{7:[1,127]},{7:[1,128]},{7:[1,129]},{7:[1,130]},{7:[1,131],78:$Vo,82:$Vp,83:$Vq,84:$Vr},o($Vm,[2,63]),o($VD,[2,68],{78:$Vo,82:$Vp,83:$Vq,84:$Vr}),o($VD,[2,72],{78:$Vo,82:$Vp,83:$Vq,84:$Vr}),o($Vw,[2,73]),o($Vw,[2,74]),{39:[1,132],78:$Vo,82:$Vp,83:$Vq,84:$Vr},o($Vm,[2,67]),{7:[1,133]},{7:[2,31],22:[1,134],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{7:[1,135]},{7:[2,42],58:[1,136],59:[1,137],60:[1,138],61:[1,139],62:[1,140],63:[1,141],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{7:[1,142]},{5:[1,143]},{7:[1,144]},{17:$Vn,21:145,39:[1,146],50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{7:[1,147]},{7:[2,35],22:[1,148]},o($VE,[2,38],{78:$Vo,82:$Vp,83:$Vq,84:$Vr}),o($VE,[2,39]),o($Vw,[2,71]),o($Vw,[2,76]),{7:[1,149]},{7:[1,150]},{7:[1,151]},{7:[1,152]},{7:[1,153]},{7:[2,26],22:[1,154]},{39:[1,155]},{15:[1,156]},{8:[1,157]},{42:[1,158]},o([4,17,19,28,32,42,45,53,64,66,69,74,75,76,79,80,85,86],[2,15]),o($VC,[2,20]),{39:[1,159]},{7:[1,160],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{39:[1,161]},{39:[1,162]},{39:[1,163]},{39:[1,164]},{39:[1,165]},o($Vm,[2,66]),o($Vw,[2,30]),{7:$Vx,17:$Vn,21:100,50:25,51:166,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{8:[1,167]},{17:$Vn,21:168,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:169,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:170,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:171,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:172,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{17:$Vn,21:173,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{8:[1,174]},{17:$Vn,21:175,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{8:[1,176]},{39:[1,177],78:$Vo,82:$Vp,83:$Vq,84:$Vr},o($Vm,[2,29]),{39:[2,34]},{7:$Vy,17:$Vn,21:109,50:25,54:178,55:108,56:$Vz,79:$Ve,80:$Vf,85:$Vg,86:$Vh},o($Vw,[2,77]),o($Vw,[2,78]),o($Vw,[2,79]),o($Vw,[2,80]),{8:[1,179]},{7:$VA,17:$VB,47:180},o($Vm,[2,51]),{39:[2,4]},o([4,15,17,19,28,32,45,53,64,66,69,74,75,76,79,80,85,86],[2,3]),{39:[2,18]},o($VC,[2,17]),{8:[1,181]},o($Vm,[2,55]),o($Vm,[2,56]),o($Vm,[2,57]),o($Vm,[2,58]),o($Vm,[2,59]),{7:[2,32]},{10:[2,1]},{7:[2,43],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{7:[2,44],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{7:[2,45],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{7:[2,46],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{7:[2,47],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{7:[2,48],78:$Vo,82:$Vp,83:$Vq,84:$Vr},o([4,17,19,28,30,32,45,53,64,66,69,74,75,76,79,80,85,86],[2,10]),{22:[1,182],78:$Vo,82:$Vp,83:$Vq,84:$Vr},o($VC,[2,13]),o($Vm,[2,28]),{7:[2,36]},o([4,17,19,28,32,45,49,53,64,66,69,74,75,76,79,80,85,86],[2,24]),{7:[2,27]},o([4,17,19,28,32,34,36,38,42,45,53,64,66,69,74,75,76,79,80,85,86],[2,14]),{17:$Vn,21:183,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{22:[1,184],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{17:$Vn,21:185,50:25,79:$Ve,80:$Vf,85:$Vg,86:$Vh},{7:[1,186],78:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:[1,187]},o([4,17,19,24,28,32,45,53,64,66,69,74,75,76,79,80,85,86],[2,7])],
defaultActions: {28:[2,11],39:[2,9],71:[2,23],77:[2,12],79:[2,8],82:[2,19],147:[2,34],156:[2,4],158:[2,18],166:[2,32],167:[2,1],178:[2,36],180:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return '\n';
break;
case 1:return 79;
break;
case 2:return 53;
break;
case 3:return 75;
break;
case 4:return 39;
break;
case 5:return 22;
break;
case 6:return 8;
break;
case 7:return 62;
break;
case 8:return 77;
break;
case 9:return 58;
break;
case 10:return 83;
break;
case 11:return 84;
break;
case 12:return 82;
break;
case 13:return 'INC';
break;
case 14:return 78;
break;
case 15:return 63;
break;
case 16:return 60;
break;
case 17:return 61;
break;
case 18:return '^';
break;
case 19:return 65;
break;
case 20:return 66;
break;
case 21:return 5;
break;
case 22:return 7;
break;
case 23:return 80;
break;
case 24:return 81;
break;
case 25:return 'PI';
break;
case 26:return 58;
break;
case 27:return 59;
break;
case 28:return 49;
break;
case 29:return 76;
break;
case 30:return 45;
break;
case 31:return 32;
break;
case 32:return 34;
break;
case 33:return 36;
break;
case 34:return 38;
break;
case 35:return 42;
break;
case 36:return 30;
break;
case 37:return 24;
break;
case 38:return 4;
break;
case 39:return 10;
break;
case 40:return 13;
break;
case 41:return 15;
break;
case 42:return 19;
break;
case 43:return 'FAIRE';
break;
case 44:return 20;
break;
case 45:return 'A';
break;
case 46:return 'E';
break;
case 47:return 68;
break;
case 48:return 85;
break;
case 49:return 74;
break;
case 50:return 69;
break;
case 51:return 70;
break;
case 52:return 71;
break;
case 53:return 73;
break;
case 54:return 72;
break;
case 55:return 64;
break;
case 56:return 67;
break;
case 57:return 28;
break;
case 58:return 86;
break;
case 59:return 17;
break;
case 60:return 56;
break;
case 61:/* skip whitespace */
break;
}
},
rules: [/^(?:\\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:Afficher\b)/,/^(?:\/\*\/.*?\/\*\/)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:==)/,/^(?:=)/,/^(?:>)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:PI\b)/,/^(?:>)/,/^(?:<)/,/^(?:Retourner\b)/,/^(?:Retourne\b)/,/^(?:Fonction\b)/,/^(?:Selon\b)/,/^(?:Cas\b)/,/^(?:Defaut\b)/,/^(?:Pause\b)/,/^(?:FinChoix\b)/,/^(?:FinTantque\b)/,/^(?:FinPour\b)/,/^(?:Si\b)/,/^(?:Alors\b)/,/^(?:Sinon\b)/,/^(?:FinSi\b)/,/^(?:Pour\b)/,/^(?:Faire\b)/,/^(?:AllantDe\b)/,/^(?:A\b)/,/^(?:E\b)/,/^(?:$)/,/^(?:recup\b)/,/^(?:parle\b)/,/^(?:move\b)/,/^(?:haut\b)/,/^(?:bas\b)/,/^(?:droite\b)/,/^(?:gauche\b)/,/^(?:DEBUTSOURCE\b)/,/^(?:FINSOURCE\b)/,/^(?:Tantque\b)/,/^(?:test\b)/,/^(?:[A-Za-z_][A-Za-z_0-9]*)/,/^(?:'.*?')/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = langage;
exports.Parser = langage.Parser;
exports.parse = function () { return langage.parse.apply(langage, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}